package com.ebssas.wsrestapicoopedac.deceval.service.client;

/**
 * Please modify this class to meet your needs This class is not complete
 */
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.ConsultaPagareServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.CrearGiradorDaneServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.DocumentoPagareServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.HeaderDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.InformacionFirmaPagareDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.RespuestaConsultarPagaresDTO;
import java.io.Serializable;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.endpoint.Endpoint;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.Interceptor;
import org.apache.cxf.message.Message;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.WSConstants;
import org.apache.wss4j.dom.handler.WSHandlerConstants;

import com.ebssas.wsrestapicoopedac.deceval.sdl.services.RespuestaCrearGiradorDaneServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.RespuestaDocumentoPagareServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.RespuestaFirmarPagaresAsincronoDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.RespuestaFirmarPagaresDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SDLService;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SDLService_Service;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SolicitudConsultarPagareDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SolicitudCrearGiradorDaneServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SolicitudCrearPagareServiceDTO;
import com.ebssas.wsrestapicoopedac.deceval.sdl.services.SolicitudFirmarPagaresDTO;
import com.ebssas.wsrestapicoopedac.deceval.service.util.ConstantesFirmaDigital;
import com.ebssas.wsrestapicoopedac.deceval.service.util.PasswordCallback;
import com.ebssas.wsrestapicoopedac.deceval.service.util.PropertiesLoader;
import com.ebssas.wsrestapicoopedac.deceval.service.util.WSSConstantes;
import com.ebssas.wsrestapicoopedac.general.Utilidad;
import java.util.Date;

/**
 * This class was generated by Apache CXF 3.0.4 2015-02-26T10:38:26.959-05:00
 * Generated source version: 3.0.4
 *
 */
public final class SDLServiceClient implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    private static final QName SERVICE_NAME = new QName("http://deceval.com/sdl/services/", "SDLService");

    private Utilidad utilidad = new Utilidad();

    public SDLService service = null;

    public SDLService getService() {
        SDLService aux = null;
        URL wsdlURL = null;
        if (service != null) {
            aux = service;
        } else {
            try {
                System.out.println("Configuracion System");
                System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");
                // certificados del servidor
                System.setProperty("javax.net.ssl.trustStore", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.file"));
                System.setProperty("javax.net.ssl.trustStorePassword", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.password"));
                // certificados del cliente
                System.setProperty("javax.net.ssl.keyStore", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.file"));
                System.setProperty("javax.net.ssl.keyStorePassword", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.password"));
                System.setProperty("http.auth.digest.validateServer", "true");

                System.out.println("Getting Connection WSDL ...");

                SDLService_Service ss = new SDLService_Service(wsdlURL, SERVICE_NAME);
                aux = ss.getSDLServicePort();

                System.out.println("Security config ...");

                Map<String, Object> ctx = ((BindingProvider) aux).getRequestContext();
                ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, PropertiesLoader.loadProperty("co.com.integracion.sdl.enpoint.address"));

                // configuracion archivo crypto.properties
                Properties cryptoProperties = new Properties();

                cryptoProperties.put("org.apache.ws.security.crypto.provider", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.provider"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.file", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.merlin.keystore.file"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.type", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.merlin.keystore.type"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.password", PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.password"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.alias", PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.user"));

                ctx.put("cryptoProperties", cryptoProperties);

                // Wrap de CXF que permite adicionar los interceptores de seguridad
                Client client = ClientProxy.getClient(aux);
                Endpoint cxfEndpoint = client.getEndpoint();

                StringBuilder acciones = new StringBuilder();
                acciones.append(WSSConstantes.USERNAMETOKEN.getValor()).append(" ")
                        .append(WSSConstantes.FIRMADO.getValor()).append(" ")
                        .append(WSSConstantes.TIMESTAMP.getValor());

                Map<String, Object> ouputWSSProps = new HashMap<String, Object>();

                // Se inidica cuales son la acciones criptogr�ficas a usar
                ouputWSSProps.put(WSHandlerConstants.ACTION, acciones.toString());

                // Configuraci�n Firma Digital (Incluye Timestamp)
                ouputWSSProps.put(WSHandlerConstants.SIGNATURE_USER, PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.user"));
                ouputWSSProps.put(WSHandlerConstants.SIG_PROP_REF_ID, "cryptoProperties");
                ouputWSSProps.put(WSHandlerConstants.SIG_KEY_ID, "IssuerSerial");
                ouputWSSProps.put(WSHandlerConstants.INCLUDE_SIGNATURE_TOKEN, "true");
                ouputWSSProps.put(WSHandlerConstants.SIGNATURE_PARTS, ConstantesFirmaDigital.SIGN_PARTS);

                // Configuraci�n UsernameToken
                ouputWSSProps.put(WSHandlerConstants.USER, PropertiesLoader.loadProperty("co.com.integracion.token.username"));
                ouputWSSProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_DIGEST);
                ouputWSSProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, PasswordCallback.class.getName());

                // Se crea el interceptor de salida que va procesar las peticiones de salida
                // e incluir las caracter�sticas de seguridad configuradas
                WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(ouputWSSProps);
                cxfEndpoint.getOutInterceptors().add((Interceptor<? extends Message>) wssOut);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return aux;
    }

    public HeaderDTO getHeader() {
        HeaderDTO headerDTO = new HeaderDTO();

        try {
            System.out.println("Setting header for service ...");
            String sFechaHeader = utilidad.dateToStringFormatFechaAnioMesDiaDeceval(new Date());
            String sHoraHeader = utilidad.dateToStringFormatFechaAnioMesDiaDeceval(new Date());
            headerDTO.setCodigoDepositante(904);
            headerDTO.setFecha(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(sFechaHeader + "T00:00:00"));
            headerDTO.setHora(sHoraHeader);
            headerDTO.setUsuario("86052054781");
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
        }
        return headerDTO;
    }

    public RespuestaConsultarPagaresDTO consultaPagares(ConsultaPagareServiceDTO consultaPagaresDTO) {
        RespuestaConsultarPagaresDTO rtaConsultarPagaresDTO = null;
        try {
            System.out.println("Invoking consultarPagares ...");
            System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
            SolicitudConsultarPagareDTO solicitudConsultaPagares = new SolicitudConsultarPagareDTO();

            solicitudConsultaPagares.setConsultaPagareServiceDTO(consultaPagaresDTO);

            solicitudConsultaPagares.setHeader(getHeader());

            System.out.println("Waiting for return ...");
            SDLService service = getService();
            System.out.println("Informacion a enviar: " + solicitudConsultaPagares.toString());
            System.out.println("Informacion a enviar(Header): " + solicitudConsultaPagares.getHeader().getCodigoDepositante().toString());
            rtaConsultarPagaresDTO = service.consultarPagares(solicitudConsultaPagares);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return rtaConsultarPagaresDTO;
    }

    public RespuestaCrearGiradorDaneServiceDTO crearGirador(CrearGiradorDaneServiceDTO crearGiradorDane) {
        RespuestaCrearGiradorDaneServiceDTO rtaCrearGiradorDaneServiceDTO = null;
        try {
            System.out.println("Invoking CrearGirador ...");
            System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
            SolicitudCrearGiradorDaneServiceDTO solicitudCrearGiradorDane = new SolicitudCrearGiradorDaneServiceDTO();

            solicitudCrearGiradorDane.setCrearGiradorDTO(crearGiradorDane);

            solicitudCrearGiradorDane.setHeader(getHeader());

            System.out.println("Waiting for return ...");
            SDLService service = getService();
            rtaCrearGiradorDaneServiceDTO = service.creacionGiradoresCodificados(solicitudCrearGiradorDane);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return rtaCrearGiradorDaneServiceDTO;
    }

    public RespuestaDocumentoPagareServiceDTO crearPagare(DocumentoPagareServiceDTO documentoPagareServiceDTO) {
        System.out.println("Invoking CrearPagare ...");

        RespuestaDocumentoPagareServiceDTO rtaDocumentoPagareServiceDTO = null;
        try {
            System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
            SolicitudCrearPagareServiceDTO scpsdto = new SolicitudCrearPagareServiceDTO();

            scpsdto.setHeader(getHeader());
            scpsdto.getDocumentoPagareServiceDTO().add(documentoPagareServiceDTO);

            System.out.println("Waiting for return ...");
            SDLService service = getService();
            rtaDocumentoPagareServiceDTO = service.creacionPagares(scpsdto);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return rtaDocumentoPagareServiceDTO;
    }

    public RespuestaFirmarPagaresDTO FirmarPagare(InformacionFirmaPagareDTO firmarPagare) {
        System.out.println("Invoking FirmanPagare ...");
        RespuestaFirmarPagaresDTO rtaFirmarPagaresDTO = null;
        try {
            System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
            SolicitudFirmarPagaresDTO solicitudFirmarPagare = new SolicitudFirmarPagaresDTO();

            solicitudFirmarPagare.setHeader(getHeader());
            solicitudFirmarPagare.setInformacionFirmaPagareDTO(firmarPagare);

            System.out.println("Waiting for return ...");
            SDLService service = getService();
            rtaFirmarPagaresDTO = service.firmarPagares(solicitudFirmarPagare);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return rtaFirmarPagaresDTO;
    }

    public RespuestaFirmarPagaresAsincronoDTO FirmarPagareAsincrono(InformacionFirmaPagareDTO informacionFirmaPagareDTO) {
        System.out.println("Invoking FirmanPagare ...");
        RespuestaFirmarPagaresAsincronoDTO rtaFirmarPagaresDTO = null;
        try {
            System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
            SolicitudFirmarPagaresDTO solicitudFirmarPagare = new SolicitudFirmarPagaresDTO();

            solicitudFirmarPagare.setHeader(getHeader());
            solicitudFirmarPagare.setInformacionFirmaPagareDTO(informacionFirmaPagareDTO);

            System.out.println("Waiting for return ...");
            SDLService service = getService();
            rtaFirmarPagaresDTO = service.firmarPagaresAsincrono(solicitudFirmarPagare);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return rtaFirmarPagaresDTO;
    }

}
