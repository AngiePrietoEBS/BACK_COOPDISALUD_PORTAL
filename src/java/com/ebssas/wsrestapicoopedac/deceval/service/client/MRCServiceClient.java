package com.ebssas.wsrestapicoopedac.deceval.service.client;

import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.endpoint.Endpoint;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.Interceptor;
import org.apache.cxf.message.Message;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.WSConstants;
import org.apache.wss4j.dom.handler.WSHandlerConstants;

import com.deceval.mrc.solicitud.WsGenerarTokenPortType;
import com.deceval.mrc.solicitud.WsGenerarTokenService;
import com.deceval.mrc.solicitud.to.InformacionFirmaPagareTO;
import com.deceval.mrc.solicitud.to.InformacionPagareTO;
import com.ebssas.wsrestapicoopedac.deceval.service.util.ConstantesFirmaDigital;
import com.ebssas.wsrestapicoopedac.deceval.service.util.PasswordCallback;
import com.ebssas.wsrestapicoopedac.deceval.service.util.PropertiesLoader;
import com.ebssas.wsrestapicoopedac.deceval.service.util.WSSConstantes;

/**
 * This class was generated by Apache CXF 3.0.4 2015-02-26T10:38:26.959-05:00
 * Generated source version: 3.0.4
 *
 */
public final class MRCServiceClient {

    private static final QName SERVICE_NAME = new QName("http://com/deceval/mrc/solicitud", "WsGenerarTokenService");

    WsGenerarTokenPortType service = null;

    public MRCServiceClient() {
    }

    public WsGenerarTokenPortType getService() {
        WsGenerarTokenPortType aux = null;
        URL wsdlURL = null;
        if (service != null) {
            aux = service;
        } else {
            try {
                System.out.println("Configuracion System");

                /* PARA PRUEBAS LOCALES */
                System.setProperty("java.protocol.handler.pkgs", "com.sun.net.ssl.internal.www.protocol");

                /* PARA WEBLOGIC JRE IBM
    			  
    			 System.setProperty("java.protocol.handler.pkgs","com.ibm.net.ssl.www.protocol");
    			 Security.addProvider(new com.ibm.jsse.IBMJSSEProvider());
                 */
                // certificados del servidor
                System.setProperty("javax.net.ssl.trustStore", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.file"));
                System.setProperty("javax.net.ssl.trustStorePassword", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.password"));
                // certificados del cliente
                System.setProperty("javax.net.ssl.keyStore", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.file"));
                System.setProperty("javax.net.ssl.keyStorePassword", PropertiesLoader.loadProperty("co.com.integracion.ssl.keystore.password"));
                System.setProperty("http.auth.digest.validateServer", "true");

                System.out.println("Getting Connection WSDL ...");

                WsGenerarTokenService ss = new WsGenerarTokenService(wsdlURL, SERVICE_NAME);
                aux = ss.getWsGenerarTokenPortTypePort();

                System.out.println("Security config ...");

                Map<String, Object> ctx = ((BindingProvider) aux).getRequestContext();
                ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, PropertiesLoader.loadProperty("co.com.integracion.mrc.enpoint.address"));

                // configuracion archivo crypto.properties
                Properties cryptoProperties = new Properties();

                cryptoProperties.put("org.apache.ws.security.crypto.provider", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.provider"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.file", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.merlin.keystore.file"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.type", PropertiesLoader.loadProperty("co.com.integracion.ws.security.crypto.merlin.keystore.type"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.password", PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.password"));
                cryptoProperties.put("org.apache.ws.security.crypto.merlin.keystore.alias", PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.user"));

                ctx.put("cryptoProperties", cryptoProperties);

                // Wrap de CXF que permite adicionar los interceptores de seguridad
                Client client = ClientProxy.getClient(aux);
                Endpoint cxfEndpoint = client.getEndpoint();

                StringBuilder acciones = new StringBuilder();
                acciones.append(WSSConstantes.USERNAMETOKEN.getValor()).append(" ")
                        .append(WSSConstantes.FIRMADO.getValor()).append(" ")
                        .append(WSSConstantes.TIMESTAMP.getValor());

                Map<String, Object> ouputWSSProps = new HashMap<String, Object>();

                // Se inidica cuales son la acciones criptogr�ficas a usar
                ouputWSSProps.put(WSHandlerConstants.ACTION, acciones.toString());

                // Configuraci�n Firma Digital (Incluye Timestamp)
                ouputWSSProps.put(WSHandlerConstants.SIGNATURE_USER, PropertiesLoader.loadProperty("co.com.integracion.wssecurity.keystore.user"));
                ouputWSSProps.put(WSHandlerConstants.SIG_PROP_REF_ID, "cryptoProperties");
                ouputWSSProps.put(WSHandlerConstants.SIG_KEY_ID, "IssuerSerial");
                ouputWSSProps.put(WSHandlerConstants.INCLUDE_SIGNATURE_TOKEN, "true");
                ouputWSSProps.put(WSHandlerConstants.SIGNATURE_PARTS, ConstantesFirmaDigital.SIGN_PARTS);

                // Configuraci�n UsernameToken
                ouputWSSProps.put(WSHandlerConstants.USER, PropertiesLoader.loadProperty("co.com.integracion.token.username"));
                ouputWSSProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_DIGEST);
                ouputWSSProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, PasswordCallback.class.getName());

                // Se crea el interceptor de salida que va procesar las peticiones de salida
                // e incluir las caracter�sticas de seguridad configuradas
                WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(ouputWSSProps);
                cxfEndpoint.getOutInterceptors().add((Interceptor<? extends Message>) wssOut);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return aux;
    }

    public void generarToken() {

        try {
            System.out.println("Invoking generarToken...");
            InformacionPagareTO generarToken = new InformacionPagareTO();
            generarToken.setEntidadBancariaId("17");
            generarToken.setEstado("ACTIVO");
            generarToken.setTipoDocumentoEntidad("NIT");
            generarToken.setNumeroIdentificacionEntidad("8600076477");
            generarToken.setTipoDocumentoFirmante("CC");
            generarToken.setNumeroDocumentoFirmante("80094102");
            generarToken.setNombreFirmante("CARLOS ED");
            generarToken.setApellidoFirmante("GRANADOS");
            generarToken.setIpOrigen("190.216.205.37");

            System.out.println("Waiting for return ...");
            InformacionFirmaPagareTO response = getService().generarToken(generarToken);

            System.out.println("consultarPagares.result");
            System.out.println("---Registro---");
            System.out.println("CodError : " + response.getCodigoError());
            System.out.println("DescError : " + response.getDescripcionError());
            System.out.println("Token : " + response.getToken());
            System.out.println("URL : " + response.getUrlFirmaPagare());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
//
//    public static void main(String args[]) throws java.lang.Exception {
//
//        System.setProperty("portalFirma.properties.file", "C:/confDeceval/client.properties");
//
//        MRCServiceClient client = new MRCServiceClient();
//        client.generarToken();
//
//    }

}
